import boto3
import psycopg2
import psycopg2.extras
import json
import os
import requests

# AWS Clients
sqs = boto3.client("sqs")
secrets_client = boto3.client("secretsmanager")

# Environment Variables
SECRET_NAME = os.environ["SECRET_NAME"]
JIRA_URL = os.environ["JIRA_URL"]
JIRA_PAT = os.environ["JIRA_PAT"]
JIRA_PROJECT_KEY = os.environ["JIRA_PROJECT_KEY"]
JIRA_ASSIGNEE = os.environ.get("JIRA_ASSIGNEE", None)


def get_db_credentials():
    response = secrets_client.get_secret_value(SecretId=SECRET_NAME)
    secret_dict = json.loads(response["SecretString"])
    return secret_dict


def create_jira_ticket(data):
    summary = f"PCI Vulnerability - QID {data['qid']} - {data['title']}"
    description = (
        f"*Severity:* {data['severity']}\n"
        f"*Threat:* {data['threat']}\n"
        f"*Impact:* {data['impact']}\n"
        f"*Solution:* {data['solution']}\n"
        f"*Team:* EFS-Security\n\n"
        f"*Appliance:* {data['ip']} | {data['dns']} | {data['os']}\n"
    )

    payload = {
        "fields": {
            "project": {"key": JIRA_PROJECT_KEY},
            "summary": summary,
            "description": description,
            "issuetype": {"name": "Story"}
        }
    }

    if JIRA_ASSIGNEE:
        payload["fields"]["assignee"] = {"name": JIRA_ASSIGNEE}

    headers = {
        "Authorization": f"Bearer {JIRA_PAT}",
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    response = requests.post(
        url=f"{JIRA_URL}/rest/api/2/issue",
        headers=headers,
        data=json.dumps(payload),
        timeout=30
    )

    if response.status_code not in (200, 201):
        raise Exception(f"Jira creation failed: {response.status_code} {response.text}")

    return response.json()["key"]


def update_ticket_in_db(record_id, ticket_key, db_credentials):
    conn = psycopg2.connect(
        host=db_credentials["host"],
        port=db_credentials["port"],
        database=db_credentials["database"],
        user=db_credentials["username"],
        password=db_credentials["password"]
    )
    cursor = conn.cursor()
    try:
        cursor.execute(
            """
            UPDATE vulnerabilities
            SET jira_ticket = %s
            WHERE id = %s
            """,
            (ticket_key, record_id)
        )
        conn.commit()
        print(f"Updated record ID {record_id} with ticket {ticket_key}")
    finally:
        cursor.close()
        conn.close()


def lambda_handler(event, context):
    db_credentials = get_db_credentials()

    for record in event["Records"]:
        try:
            body = json.loads(record["body"])
            print(f"Processing record ID {body['id']}")

            ticket_key = create_jira_ticket(body)
            update_ticket_in_db(body["id"], ticket_key, db_credentials)

        except Exception as e:
            print(f"Error processing message: {e}")