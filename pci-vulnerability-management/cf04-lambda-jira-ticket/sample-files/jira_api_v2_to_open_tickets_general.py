#!/usr/bin/env python3

import requests
import json
import csv

def create_jira_issue_with_pat(
    jira_base_url: str,
    personal_access_token: str,
    project_key: str,
    summary: str,
    description: str,
    issue_type: str = "Story",
    priority: str = "High",
    assignee_username: str = None,
    custom_fields: dict = None
):
    """
    Creates an issue in a Jira Server (9.12.x) or Data Center instance using a Personal Access Token
    and the REST API endpoint /rest/api/2/issue.
    """
    create_issue_url = f"{jira_base_url}/rest/api/2/issue"

    fields_data = {
        "project": {"key": project_key},
        "summary": summary,
        "priority": {"name": priority},
        "description": description,
        "issuetype": {"name": issue_type},
    }

    if assignee_username:
        fields_data["assignee"] = {"name": assignee_username}

    if custom_fields:
        fields_data.update(custom_fields)

    payload = {"fields": fields_data}

    headers = {
        "Authorization": f"Bearer {personal_access_token}",
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    response = requests.post(
        url=create_issue_url,
        headers=headers,
        data=json.dumps(payload),
        timeout=30
    )

    if response.status_code not in (200, 201):
        raise Exception(
            f"Failed to create Jira issue. "
            f"Status Code: {response.status_code} | Response: {response.text}"
        )

    return response.json()

def process_qid_and_create_ticket(qid_rows, jira_params):
    """
    Process QID data and create a Jira ticket
    """
    if not qid_rows:
        return

    first_row = qid_rows[0]

    summary = f"PCI Vulnerability - QID {first_row['QID']} - {first_row['Title']}"

    description = (
        "{color:#DE350B}This story was created in Jira Server 9.12.x using a Bearer token (PAT).{color}\n\n"
        "{color:#DE350B}Just a test!!!{color}\n\n"
        f"*Severity*: {first_row['Severity']}\n\n"
        f"*Threat*: {first_row['Threat']}\n\n"
        f"*Impact*: {first_row['Impact']}\n\n"
        f"*Solutions*: {first_row['Solution']}\n\n"
        "*Team Responsible*: TEAM-Sec \n\n"
        "*Appliances in threat:*\n\n"
        "||IP||DNS||OS||\n"
    )

    appliances_info = ""
    for row in qid_rows:
        appliance_line = f"|{row['IP']}|{row['DNS']}|{row['OS']}|\n"
        if len(description) + len(appliances_info) + len(appliance_line) > 32000:
            appliances_info += "... (additional appliances omitted due to character limit)\n"
            break
        appliances_info += appliance_line

    description += appliances_info

    custom_fields_required = {
        "customfield_10699": "TEST-W33K",
        "customfield_10669": "PCI",
        "customfield_10666": { "id" : "93669" }
    }

    try:
        result = create_jira_issue_with_pat(
            jira_base_url=jira_params['base_url'],
            personal_access_token=jira_params['token'],
            project_key=jira_params['project_key'],
            summary=summary,
            description=description,
            issue_type="Story",
            priority="High",
            assignee_username="username",
            custom_fields=custom_fields_required
        )
        print(f"Successfully created issue for QID {first_row['QID']}: {result['key']}")
        return result
    except Exception as e:
        print(f"Error creating Jira issue for QID {first_row['QID']}: {e}")
        return None

if __name__ == "__main__":
    # Configuration
    JIRA_BASE_URL = "https://jira.test.dev.com/jira"  # Replace with your actual Jira base URL
    PERSONAL_ACCESS_TOKEN = "your_personal_access_token"  # Replace with your actual token
    PROJECT_KEY = "YOUR-PROJECT-KEY"  # Replace with your actual project key
    csv_file_path = "/YOUR-PATH/test_output_pci.csv"  # Replace with your actual file path

    # Full list of target QIDs
    target_qids = [39666, 39667, 39668, 39669, 39670, 39671, 39672, 39673, 39674, 39675]

    # Read CSV file
    with open(csv_file_path, mode='r', newline='', encoding='utf-8') as csvfile:
        csv_reader = csv.DictReader(csvfile, delimiter=';')
        rows = list(csv_reader)

    # Group rows by QID
    qid_groups = {}
    for row in rows:
        try:
            qid = int(row["QID"])
            if qid in target_qids:
                qid_groups.setdefault(row["QID"], []).append(row)
        except (KeyError, ValueError) as e:
            print(f"Skipping row due to invalid QID or data: {e}")

    # Jira parameters
    jira_params = {
        "base_url": JIRA_BASE_URL,
        "token": PERSONAL_ACCESS_TOKEN,
        "project_key": PROJECT_KEY
    }

    # Create tickets for each QID group
    created_tickets = []
    for qid, qid_rows in qid_groups.items():
        result = process_qid_and_create_ticket(qid_rows, jira_params)
        if result:
            created_tickets.append(result['key'])

    # Print summary
    print("\nSummary:")
    print(f"Total tickets created: {len(created_tickets)}")
    print(f"Ticket keys: {', '.join(created_tickets)}")
    print("Done.")