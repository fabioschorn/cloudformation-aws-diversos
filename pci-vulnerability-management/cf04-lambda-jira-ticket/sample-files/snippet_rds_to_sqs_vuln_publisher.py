import boto3
import psycopg2
import psycopg2.extras
import json
import os
from datetime import datetime

# AWS Clients
sqs = boto3.client("sqs")
secrets_client = boto3.client("secretsmanager")

# Environment Variables
SQS_QUEUE_URL = os.environ["SQS_QUEUE_URL"]
SECRET_NAME = os.environ["SECRET_NAME"]


def get_db_credentials():
    """Retrieve RDS credentials from AWS Secrets Manager"""
    response = secrets_client.get_secret_value(SecretId=SECRET_NAME)
    secret_dict = json.loads(response["SecretString"])
    return secret_dict


def lambda_handler(event, context):
    """Lambda handler to extract data from RDS and send it to SQS"""
    credentials = get_db_credentials()

    try:
        conn = psycopg2.connect(
            host=credentials["host"],
            port=credentials["port"],
            database=credentials["database"],
            user=credentials["username"],
            password=credentials["password"]
        )
        cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    except Exception as e:
        print(f"Database connection error: {e}")
        return {"status": "DB Connection Failed"}

    try:
        cursor.execute("""
            SELECT id, ip, dns, os, qid, title, severity, cve_id, vendor_ref, threat, impact, solution, pci_vuln, category
            FROM vulnerabilities
            WHERE jira_ticket IS NULL
        """)

        rows = cursor.fetchall()
        print(f"Fetched {len(rows)} rows to process.")

        for row in rows:
            message_body = json.dumps(dict(row))

            response = sqs.send_message(
                QueueUrl=SQS_QUEUE_URL,
                MessageBody=message_body
            )

            print(f"Sent message to SQS for record ID {row['id']}: {response['MessageId']}")

        return {"status": "Success", "records_sent": len(rows)}

    except Exception as e:
        print(f"Error during processing: {e}")
        return {"status": "Error", "message": str(e)}

    finally:
        cursor.close()
        conn.close()