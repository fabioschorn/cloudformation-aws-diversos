import socket
import ssl
import requests

# Replace with your JIRA URL
JIRA_URL = "https://jira.tests.int.com"

def check_dns_resolution(url):
    """Check if the domain resolves to an IP address"""
    try:
        hostname = url.split("//")[-1].strip("/")
        ip = socket.gethostbyname(hostname)
        print(f"‚úÖ DNS Resolution Successful: {hostname} -> {ip}")
        return True
    except socket.gaierror as e:
        print(f"‚ùå DNS Resolution Failed: {e}")
        return False

def check_ssl_certificate(url):
    """Check if SSL/TLS connection is possible"""
    try:
        hostname = url.split("//")[-1].strip("/")
        context = ssl.create_default_context()
        with socket.create_connection((hostname, 443), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                cert = ssock.getpeercert()
                print(f"‚úÖ SSL Certificate Valid for {hostname}")
                return True
    except Exception as e:
        print(f"‚ùå SSL Certificate Error: {e}")
        return False

def check_http_request(url):
    """Perform an HTTP request and log the status code"""
    try:
        response = requests.get(url, timeout=5)
        print(f"üîÑ HTTP Response Code: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ HTTP Connection Successful")
        else:
            print(f"‚ö†Ô∏è HTTP returned non-200 status: {response.status_code} - {response.reason}")
        return response.status_code
    except requests.exceptions.Timeout:
        print("‚ùå HTTP Request Timeout")
        return None
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå Connection Error: {e}")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Unexpected HTTP Error: {e}")
        return None

def lambda_handler(event, context):
    """Lambda handler function"""
    print(f"üîç Testing connectivity to {JIRA_URL}...\n" + "-" * 50)
    
    dns_success = check_dns_resolution(JIRA_URL)
    ssl_success = check_ssl_certificate(JIRA_URL) if dns_success else False
    http_status = check_http_request(JIRA_URL) if ssl_success else None

    if not dns_success:
        return {"status": "Failed", "error": "DNS resolution failed"}
    elif not ssl_success:
        return {"status": "Failed", "error": "SSL certificate issue"}
    elif http_status is None:
        return {"status": "Failed", "error": "HTTP connection failed"}
    
    return {"status": "Success", "http_status": http_status}