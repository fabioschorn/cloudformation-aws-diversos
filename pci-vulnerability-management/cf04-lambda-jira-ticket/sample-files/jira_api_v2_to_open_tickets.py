#!/usr/bin/env python3

import requests
import json
import csv

def create_jira_issue_with_pat(
    jira_base_url: str,
    personal_access_token: str,
    project_key: str,
    summary: str,
    description: str,
    issue_type: str = "Story",
    assignee_username: str = None,
    custom_fields: dict = None,
):
    """
    Creates a Jira issue using REST API with PAT auth.

    Args:
        jira_base_url (str): Full Jira base URL (e.g., https://jira.example.com)
        personal_access_token (str): Jira Personal Access Token
        project_key (str): Jira Project key (e.g., EFSREL)
        summary (str): Issue title
        description (str): Issue description
        issue_type (str): Jira issue type (default: Story)
        assignee_username (str): Jira username to assign (optional)
        custom_fields (dict): Any additional custom fields

    Returns:
        dict: Jira API response
    """
    create_issue_url = f"{jira_base_url}/rest/api/2/issue"

    fields_data = {
        "project": {"key": project_key},
        "summary": summary,
        "description": description,
        "issuetype": {"name": issue_type}
    }

    if assignee_username:
        fields_data["assignee"] = {"name": assignee_username}

    if custom_fields:
        fields_data.update(custom_fields)

    payload = {"fields": fields_data}

    headers = {
        "Authorization": f"Bearer {personal_access_token}",
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    response = requests.post(
        url=create_issue_url,
        headers=headers,
        data=json.dumps(payload),
        timeout=30
    )

    if response.status_code not in (200, 201):
        raise Exception(f"Failed to create Jira issue.\nStatus: {response.status_code}\nResponse: {response.text}")

    return response.json()

# ====================== MAIN =========================

if __name__ == "__main__":
    # üîß Configuration
    JIRA_BASE_URL = "https://jira.test.tools-pi.com/"
    PERSONAL_ACCESS_TOKEN = "your-token"  # Replace securely
    PROJECT_KEY = "EFSREL"
    CSV_PATH = "/Users/fschorn/Downloads/test03_output_pci.csv"

    target_qids = ["123456", "789012", "345678"]  # Add your target QIDs here

    # üßæ Read CSV
    with open(CSV_PATH, mode="r", encoding="utf-8") as csvfile:
        csv_reader = csv.DictReader(csvfile, delimiter=';')
        rows = list(csv_reader)

    # üß† Group by QID
    qid_groups = {}
    for row in rows:
        try:
            if int(row["QID"]) in target_qids:
                qid_groups.setdefault(row["QID"], []).append(row)
        except (ValueError, KeyError) as e:
            print(f"Skipping invalid row: {e}")

    # üéüÔ∏è Create Jira tickets
    for qid, qid_rows in qid_groups.items():
        first_row = qid_rows[0]

        summary = f"PCI Vulnerability - QID {qid} - {first_row.get('Title', 'No Title')}"
        description = (
            f"*PCI Vulnerability Details*\n"
            f"*Severity:* {first_row.get('Severity', '')}\n"
            f"*Threat:* {first_row.get('Threat', '')}\n"
            f"*Impact:* {first_row.get('Impact', '')}\n"
            f"*Solution:* {first_row.get('Solution', '')}\n"
            f"*Team:* EFS-Security\n"
            f"*Appliances:*\n"
        )

        # üë• Add affected devices
        devices_text = ""
        for row in qid_rows:
            line = f"- {row.get('IP', '')} | {row.get('DNS', '')} | {row.get('OS', '')}\n"
            if len(description) + len(devices_text) + len(line) > 32000:
                devices_text += "... (truncated due to character limit)\n"
                break
            devices_text += line

        description += devices_text

        # üß© Add custom fields if required
        custom_fields_required = {
            "customfield_10010": {"value": "SECTEAM-10666"},
            "customfield_10510": {"id": "93669"}
        }

        try:
            result = create_jira_issue_with_pat(
                jira_base_url=JIRA_BASE_URL,
                personal_access_token=PERSONAL_ACCESS_TOKEN,
                project_key=PROJECT_KEY,
                summary=summary,
                description=description,
                issue_type="Story",
                assignee_username="fschorn",  # Optional
                custom_fields=custom_fields_required
            )
            print(f"‚úÖ Created issue for QID {qid}: {result['key']}")
        except Exception as e:
            print(f"‚ùå Error creating issue for QID {qid}: {e}")