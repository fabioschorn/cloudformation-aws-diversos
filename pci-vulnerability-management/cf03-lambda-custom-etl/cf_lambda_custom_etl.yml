AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Deploys a Lambda function that reads PCI vulnerability CSV files from S3, retrieves RDS credentials from AWS Secrets Manager, 
  and inserts the data into a PostgreSQL database.

Parameters:
  RDSHost:
    Type: String
    Description: "RDS PostgreSQL endpoint (from the previous stack)."
  
  RDSPort:
    Type: Number
    Default: 5432
    Description: "PostgreSQL port number."

  RDSDatabase:
    Type: String
    Default: "vulnerabilitydb"
    Description: "Target PostgreSQL database name."

  RDSUsername:
    Type: String
    Description: "PostgreSQL username."
  
  RDSPassword:
    Type: String
    NoEcho: true
    Description: "PostgreSQL password."

  S3Bucket:
    Type: String
    Default: "vm-analysis-project-poc02"
    Description: "S3 bucket where processed PCI vulnerability CSVs are stored."

  S3ProcessedPath:
    Type: String
    Default: "output-processed/pci/"
    Description: "Path to the processed CSV files."

Resources:
  ##########################################################
  # 1) AWS Secrets Manager - Stores RDS Credentials Securely
  ##########################################################
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "rds/credentials/vulnerabilitydb"
      Description: "RDS credentials for Lambda access"
      SecretString: !Sub |
        {
          "username": "${RDSUsername}",
          "password": "${RDSPassword}",
          "host": "${RDSHost}",
          "port": "${RDSPort}",
          "database": "${RDSDatabase}"
        }

  ##########################################################
  # 2) IAM Role for Lambda Function - Grants Necessary Permissions
  ##########################################################
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LambdaRDSCSVRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                  - !Sub "arn:aws:s3:::${S3Bucket}/${S3ProcessedPath}*"
        - PolicyName: RDSConnectAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds-db:connect
                Resource: "*"
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref RDSSecret

  ##########################################################
  # 3) Lambda Function - Reads CSV from S3 & Inserts into PostgreSQL
  ##########################################################
  CSVToPostgresLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "CSVToPostgresLambda-${AWS::StackName}"
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          S3_PATH: !Ref S3ProcessedPath
          SECRET_NAME: "rds/credentials/vulnerabilitydb"
      Code:
        ZipFile: |
          import boto3
          import sys
          sys.path.append('/opt/python')
          import psycopg2
          import psycopg2.extras
          import csv
          import os
          import io
          import json

          # AWS Clients
          s3 = boto3.client('s3')
          secrets_client = boto3.client('secretsmanager')

          # Retrieve env variables
          S3_BUCKET = os.environ['S3_BUCKET']
          S3_PATH = os.environ['S3_PATH']
          SECRET_NAME = os.environ['SECRET_NAME']

          def get_db_credentials():
              """Retrieve RDS credentials from AWS Secrets Manager"""
              try:
                  response = secrets_client.get_secret_value(SecretId=SECRET_NAME)
                  secret_dict = json.loads(response["SecretString"])
                  return secret_dict
              except Exception as e:
                  print(f"Error retrieving secret: {e}")
                  raise

          def lambda_handler(event, context):
              """Lambda function to read CSV from S3 and insert into PostgreSQL"""

              # Get RDS credentials from Secrets Manager
              credentials = get_db_credentials()

              # Identify latest CSV file
              response = s3.list_objects_v2(Bucket=S3_BUCKET, Prefix=S3_PATH)
              if "Contents" not in response:
                  print("No files found in processed PCI directory.")
                  return {"status": "No CSV found"}

              latest_file = max(response["Contents"], key=lambda obj: obj["LastModified"])
              file_key = latest_file["Key"]
              print(f"Processing file: s3://{S3_BUCKET}/{file_key}")

              # Download CSV data
              obj = s3.get_object(Bucket=S3_BUCKET, Key=file_key)
              csv_data = obj['Body'].read().decode('utf-8').splitlines()
              csv_reader = csv.reader(csv_data, delimiter=';')

              # Skip the header row
              headers = next(csv_reader)
              print(f"CSV Headers: {headers}")

              # Connect to RDS PostgreSQL
              try:
                  conn = psycopg2.connect(
                      host=credentials["host"],
                      port=credentials["port"],
                      database=credentials["database"],
                      user=credentials["username"],
                      password=credentials["password"]
                  )
                  cursor = conn.cursor()
              except Exception as e:
                  print(f"Database connection error: {e}")
                  return {"status": "DB Connection Failed"}

              # Prepare insert statement
              insert_query = """
              INSERT INTO vulnerabilities (ip, dns, os, qid, title, severity, cve_id, vendor_ref, threat, impact, solution, pci_vuln, category)
              VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
              """

              row_count = 0
              for row in csv_reader:
                  cursor.execute(insert_query, tuple(row))
                  row_count += 1

              # Commit and close connection
              conn.commit()
              cursor.close()
              conn.close()

              print(f"Inserted {row_count} rows into PostgreSQL.")
              return {"status": "Success", "rows_inserted": row_count}

Outputs:
  LambdaFunctionName:
    Description: "Name of the CSV-to-PostgreSQL Lambda function"
    Value: !Ref CSVToPostgresLambda

  LambdaFunctionArn:
    Description: "ARN of the CSV-to-PostgreSQL Lambda function"
    Value: !GetAtt CSVToPostgresLambda.Arn